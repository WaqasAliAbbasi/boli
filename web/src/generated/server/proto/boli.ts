// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: server/proto/boli.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import { Empty } from "../../google/protobuf/empty";

export const protobufPackage = "boli";

export interface Translation {
  sourceLanguage: string;
  destinationLanguage: string;
  sourceText: string;
  destinationText: string;
}

export interface TranslationRecorded {
}

export interface Translations {
  translations: Translation[];
}

function createBaseTranslation(): Translation {
  return { sourceLanguage: "", destinationLanguage: "", sourceText: "", destinationText: "" };
}

export const Translation: MessageFns<Translation> = {
  encode(message: Translation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceLanguage !== "") {
      writer.uint32(10).string(message.sourceLanguage);
    }
    if (message.destinationLanguage !== "") {
      writer.uint32(18).string(message.destinationLanguage);
    }
    if (message.sourceText !== "") {
      writer.uint32(26).string(message.sourceText);
    }
    if (message.destinationText !== "") {
      writer.uint32(34).string(message.destinationText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Translation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceLanguage = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationLanguage = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceText = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.destinationText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Translation {
    return {
      sourceLanguage: isSet(object.sourceLanguage) ? globalThis.String(object.sourceLanguage) : "",
      destinationLanguage: isSet(object.destinationLanguage) ? globalThis.String(object.destinationLanguage) : "",
      sourceText: isSet(object.sourceText) ? globalThis.String(object.sourceText) : "",
      destinationText: isSet(object.destinationText) ? globalThis.String(object.destinationText) : "",
    };
  },

  toJSON(message: Translation): unknown {
    const obj: any = {};
    if (message.sourceLanguage !== "") {
      obj.sourceLanguage = message.sourceLanguage;
    }
    if (message.destinationLanguage !== "") {
      obj.destinationLanguage = message.destinationLanguage;
    }
    if (message.sourceText !== "") {
      obj.sourceText = message.sourceText;
    }
    if (message.destinationText !== "") {
      obj.destinationText = message.destinationText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Translation>, I>>(base?: I): Translation {
    return Translation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Translation>, I>>(object: I): Translation {
    const message = createBaseTranslation();
    message.sourceLanguage = object.sourceLanguage ?? "";
    message.destinationLanguage = object.destinationLanguage ?? "";
    message.sourceText = object.sourceText ?? "";
    message.destinationText = object.destinationText ?? "";
    return message;
  },
};

function createBaseTranslationRecorded(): TranslationRecorded {
  return {};
}

export const TranslationRecorded: MessageFns<TranslationRecorded> = {
  encode(_: TranslationRecorded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslationRecorded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslationRecorded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TranslationRecorded {
    return {};
  },

  toJSON(_: TranslationRecorded): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslationRecorded>, I>>(base?: I): TranslationRecorded {
    return TranslationRecorded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslationRecorded>, I>>(_: I): TranslationRecorded {
    const message = createBaseTranslationRecorded();
    return message;
  },
};

function createBaseTranslations(): Translations {
  return { translations: [] };
}

export const Translations: MessageFns<Translations> = {
  encode(message: Translations, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.translations) {
      Translation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Translations {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslations();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.translations.push(Translation.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Translations {
    return {
      translations: globalThis.Array.isArray(object?.translations)
        ? object.translations.map((e: any) => Translation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Translations): unknown {
    const obj: any = {};
    if (message.translations?.length) {
      obj.translations = message.translations.map((e) => Translation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Translations>, I>>(base?: I): Translations {
    return Translations.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Translations>, I>>(object: I): Translations {
    const message = createBaseTranslations();
    message.translations = object.translations?.map((e) => Translation.fromPartial(e)) || [];
    return message;
  },
};

export interface Translate {
  TranslateText(request: DeepPartial<Translation>, metadata?: grpc.Metadata): Promise<TranslationRecorded>;
  GetTranslations(request: DeepPartial<Empty>, metadata?: grpc.Metadata): Promise<Translations>;
}

export class TranslateClientImpl implements Translate {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.TranslateText = this.TranslateText.bind(this);
    this.GetTranslations = this.GetTranslations.bind(this);
  }

  TranslateText(request: DeepPartial<Translation>, metadata?: grpc.Metadata): Promise<TranslationRecorded> {
    return this.rpc.unary(TranslateTranslateTextDesc, Translation.fromPartial(request), metadata);
  }

  GetTranslations(request: DeepPartial<Empty>, metadata?: grpc.Metadata): Promise<Translations> {
    return this.rpc.unary(TranslateGetTranslationsDesc, Empty.fromPartial(request), metadata);
  }
}

export const TranslateDesc = { serviceName: "boli.Translate" };

export const TranslateTranslateTextDesc: UnaryMethodDefinitionish = {
  methodName: "TranslateText",
  service: TranslateDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return Translation.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = TranslationRecorded.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const TranslateGetTranslationsDesc: UnaryMethodDefinitionish = {
  methodName: "GetTranslations",
  service: TranslateDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return Empty.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = Translations.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
